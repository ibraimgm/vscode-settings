{
	// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Import React": {
		"prefix": "imr",
		"body": "import React from 'react';",
		"description": "Import React"
	},
	"Import React + Component": {
		"prefix": "imrc",
		"body": "import React, { Component } from 'react';",
		"description": "Import React and Component"
	},
	"Import PropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types';"],
    "description": "Import PropTypes"
	},
	"Import connect": {
		"prefix": "imc",
		"body": "import { connect } from 'react-redux';",
		"description": "Import connect from react-redux"
	},
	"Import bindActionCreators": {
		"prefix": "imbac",
		"body": "import { bindActionCreators } from 'redux';",
		"description": "Import bindActionCreators from redux"
	},
	"Simple Stateless Funcion Component": {
		"prefix": "ssfc",
		"body": [
			"export default (${1:props}) => (",
			"\t$0",
			")"
		],
		"description": "Simple Stateless Funcion Component"
	},
	"Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },
	"Class Component": {
    "prefix": "cc",
    "body": [
			"class $1 extends Component {",
			"\trender() { ",
			"\t\treturn (",
			"\t\t\t$0",
			"\t\t)",
			"\t}",
			"}",
			"",
			"export default $1;"
    ],
    "description": "Class Component"
  },
	"Class Component With Constructor": {
    "prefix": "ccc",
    "body": [
      "class $1 extends Component {",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
			"\t}",
			"",
      "\trender() { ",
			"\t\treturn (",
			"\t\t\t$0",
			"\t\t)",
      "\t}",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Class Component With Constructor"
	},
	"componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}"],
    "description": "componentDidMount"
	},
	"shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}"],
    "description": "shouldComponentUpdate"
	},
	"componentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}"],
    "description": "componentDidUpdate"
	},
	"render": {
    "prefix": "ren",
    "body": ["render() {", "\treturn (", "\t\t $0", "\t);", "}"],
    "description": "render"
  },
	"Map state to props": {
		"prefix": "mstp",
		"body": [
			"const mapStateToProps = state => ({",
			"\t$0",
			"})"
		],
		"description": "Create a empty mapStateToProps stub"
	},
	"Map dispatch to props": {
		"prefix": "mdtp",
		"body": [
			"const mapDispatchToProps = dispatch => bindActionCreators({",
			"\t$0",
			"}, dispatch)"
		],
		"description": "Create an empty mapDispatchToProps"
	},
	"Export const action creator": {
		"prefix": "ecac",
		"body": [
			"export const ${1:actionName} = () => ({",
			"\ttype: '${2:ACTION_TYPE}',",
			"\tpayload: $0",
			"})"
		],
		"description": "Export a named action creator"
	},
	"Export const action dispatch": {
		"prefix": "ecad",
		"body": [
			"export const ${1:actionName} = () => {",
			"\treturn dispatch => {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Export a const action creator (redux-thunk)"
	},
	"Export default redux connect decorator": {
		"prefix": "edrc",
		"body": "export default connect(${1:mapStateToProps},${2:mapDispatchToProps})($0)",
		"description": "Export a component decorated with redux"
	},
	"Export default reducer": {
		"prefix": "edred",
		"body": [
			"export default (state${1: = INITIAL_STATE}, action) => {",
			"\tswitch(action.type) {",
			"\t\t$0",
			"\t\tdefault:",
			"\t\t\treturn state;",
			"\t}",
			"}"
		],
		"description": "Export a default reducer"
	},
	"Constant initial state": {
		"prefix": "cinits",
		"body": [
			"const INITIAL_STATE = {",
			"\t$0",
			"}"
		],
		"description": "Define a constant INITIAL_STATE"
	}
}
